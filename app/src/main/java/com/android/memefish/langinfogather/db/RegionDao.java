package com.android.memefish.langinfogather.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION".
*/
public class RegionDao extends AbstractDao<Region, Long> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Province = new Property(2, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Area = new Property(4, String.class, "area", false, "AREA");
        public final static Property Addr = new Property(5, String.class, "addr", false, "ADDR");
        public final static Property AddrDetail = new Property(6, String.class, "addrDetail", false, "ADDR_DETAIL");
        public final static Property Village = new Property(7, String.class, "village", false, "VILLAGE");
        public final static Property Code = new Property(8, String.class, "code", false, "CODE");
    }


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER\" TEXT," + // 1: user
                "\"PROVINCE\" TEXT NOT NULL ," + // 2: province
                "\"CITY\" TEXT NOT NULL ," + // 3: city
                "\"AREA\" TEXT NOT NULL ," + // 4: area
                "\"ADDR\" TEXT NOT NULL ," + // 5: addr
                "\"ADDR_DETAIL\" TEXT NOT NULL ," + // 6: addrDetail
                "\"VILLAGE\" TEXT NOT NULL ," + // 7: village
                "\"CODE\" TEXT NOT NULL );"); // 8: code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, user);
        }
        stmt.bindString(3, entity.getProvince());
        stmt.bindString(4, entity.getCity());
        stmt.bindString(5, entity.getArea());
        stmt.bindString(6, entity.getAddr());
        stmt.bindString(7, entity.getAddrDetail());
        stmt.bindString(8, entity.getVillage());
        stmt.bindString(9, entity.getCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, user);
        }
        stmt.bindString(3, entity.getProvince());
        stmt.bindString(4, entity.getCity());
        stmt.bindString(5, entity.getArea());
        stmt.bindString(6, entity.getAddr());
        stmt.bindString(7, entity.getAddrDetail());
        stmt.bindString(8, entity.getVillage());
        stmt.bindString(9, entity.getCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = new Region( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user
            cursor.getString(offset + 2), // province
            cursor.getString(offset + 3), // city
            cursor.getString(offset + 4), // area
            cursor.getString(offset + 5), // addr
            cursor.getString(offset + 6), // addrDetail
            cursor.getString(offset + 7), // village
            cursor.getString(offset + 8) // code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince(cursor.getString(offset + 2));
        entity.setCity(cursor.getString(offset + 3));
        entity.setArea(cursor.getString(offset + 4));
        entity.setAddr(cursor.getString(offset + 5));
        entity.setAddrDetail(cursor.getString(offset + 6));
        entity.setVillage(cursor.getString(offset + 7));
        entity.setCode(cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Region entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Region entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Region entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
