package com.android.memefish.langinfogather.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICTURE".
*/
public class PictureDao extends AbstractDao<Picture, Long> {

    public static final String TABLENAME = "PICTURE";

    /**
     * Properties of entity Picture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Region = new Property(2, Long.class, "region", false, "REGION");
        public final static Property OId = new Property(3, Long.class, "oId", false, "O_ID");
        public final static Property ObligeeId = new Property(4, Long.class, "obligeeId", false, "OBLIGEE_ID");
        public final static Property OneLevel = new Property(5, String.class, "oneLevel", false, "ONE_LEVEL");
        public final static Property TwoLevel = new Property(6, String.class, "twoLevel", false, "TWO_LEVEL");
        public final static Property ThreeLevel = new Property(7, String.class, "threeLevel", false, "THREE_LEVEL");
        public final static Property Path = new Property(8, String.class, "path", false, "PATH");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Sort = new Property(10, int.class, "sort", false, "SORT");
    }


    public PictureDao(DaoConfig config) {
        super(config);
    }
    
    public PictureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER\" TEXT NOT NULL ," + // 1: user
                "\"REGION\" INTEGER NOT NULL ," + // 2: region
                "\"O_ID\" INTEGER," + // 3: oId
                "\"OBLIGEE_ID\" INTEGER NOT NULL ," + // 4: obligeeId
                "\"ONE_LEVEL\" TEXT NOT NULL ," + // 5: oneLevel
                "\"TWO_LEVEL\" TEXT," + // 6: twoLevel
                "\"THREE_LEVEL\" TEXT," + // 7: threeLevel
                "\"PATH\" TEXT NOT NULL UNIQUE ," + // 8: path
                "\"NAME\" TEXT NOT NULL ," + // 9: name
                "\"SORT\" INTEGER NOT NULL );"); // 10: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Picture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser());
        stmt.bindLong(3, entity.getRegion());
 
        Long oId = entity.getOId();
        if (oId != null) {
            stmt.bindLong(4, oId);
        }
        stmt.bindLong(5, entity.getObligeeId());
        stmt.bindString(6, entity.getOneLevel());
 
        String twoLevel = entity.getTwoLevel();
        if (twoLevel != null) {
            stmt.bindString(7, twoLevel);
        }
 
        String threeLevel = entity.getThreeLevel();
        if (threeLevel != null) {
            stmt.bindString(8, threeLevel);
        }
        stmt.bindString(9, entity.getPath());
        stmt.bindString(10, entity.getName());
        stmt.bindLong(11, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Picture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser());
        stmt.bindLong(3, entity.getRegion());
 
        Long oId = entity.getOId();
        if (oId != null) {
            stmt.bindLong(4, oId);
        }
        stmt.bindLong(5, entity.getObligeeId());
        stmt.bindString(6, entity.getOneLevel());
 
        String twoLevel = entity.getTwoLevel();
        if (twoLevel != null) {
            stmt.bindString(7, twoLevel);
        }
 
        String threeLevel = entity.getThreeLevel();
        if (threeLevel != null) {
            stmt.bindString(8, threeLevel);
        }
        stmt.bindString(9, entity.getPath());
        stmt.bindString(10, entity.getName());
        stmt.bindLong(11, entity.getSort());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Picture readEntity(Cursor cursor, int offset) {
        Picture entity = new Picture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // user
            cursor.getLong(offset + 2), // region
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // oId
            cursor.getLong(offset + 4), // obligeeId
            cursor.getString(offset + 5), // oneLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // twoLevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // threeLevel
            cursor.getString(offset + 8), // path
            cursor.getString(offset + 9), // name
            cursor.getInt(offset + 10) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Picture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.getString(offset + 1));
        entity.setRegion(cursor.getLong(offset + 2));
        entity.setOId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setObligeeId(cursor.getLong(offset + 4));
        entity.setOneLevel(cursor.getString(offset + 5));
        entity.setTwoLevel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThreeLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPath(cursor.getString(offset + 8));
        entity.setName(cursor.getString(offset + 9));
        entity.setSort(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Picture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Picture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Picture entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
