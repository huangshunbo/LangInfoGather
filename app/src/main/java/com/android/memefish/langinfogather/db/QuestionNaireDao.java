package com.android.memefish.langinfogather.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_NAIRE".
*/
public class QuestionNaireDao extends AbstractDao<QuestionNaire, Long> {

    public static final String TABLENAME = "QUESTION_NAIRE";

    /**
     * Properties of entity QuestionNaire.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObligeeType = new Property(1, String.class, "obligeeType", false, "OBLIGEE_TYPE");
        public final static Property ObligeeIdentityType = new Property(2, String.class, "obligeeIdentityType", false, "OBLIGEE_IDENTITY_TYPE");
        public final static Property ObligeeIdentity = new Property(3, String.class, "obligeeIdentity", false, "OBLIGEE_IDENTITY");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property IdentityAddress = new Property(5, String.class, "identityAddress", false, "IDENTITY_ADDRESS");
        public final static Property CertificateUnit = new Property(6, String.class, "certificateUnit", false, "CERTIFICATE_UNIT");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property LandType = new Property(9, String.class, "landType", false, "LAND_TYPE");
        public final static Property RightSettingType = new Property(10, String.class, "rightSettingType", false, "RIGHT_SETTING_TYPE");
        public final static Property BuildYear = new Property(11, String.class, "buildYear", false, "BUILD_YEAR");
        public final static Property IsRebuild = new Property(12, Boolean.class, "isRebuild", false, "IS_REBUILD");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property UserId = new Property(14, String.class, "userId", false, "USER_ID");
        public final static Property Region = new Property(15, Long.class, "region", false, "REGION");
        public final static Property ObligeeId = new Property(16, Long.class, "obligeeId", false, "OBLIGEE_ID");
        public final static Property Obligee = new Property(17, String.class, "obligee", false, "OBLIGEE");
    }


    public QuestionNaireDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionNaireDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_NAIRE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBLIGEE_TYPE\" TEXT NOT NULL ," + // 1: obligeeType
                "\"OBLIGEE_IDENTITY_TYPE\" TEXT NOT NULL ," + // 2: obligeeIdentityType
                "\"OBLIGEE_IDENTITY\" TEXT NOT NULL ," + // 3: obligeeIdentity
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"IDENTITY_ADDRESS\" TEXT NOT NULL ," + // 5: identityAddress
                "\"CERTIFICATE_UNIT\" TEXT NOT NULL ," + // 6: certificateUnit
                "\"ADDRESS\" TEXT NOT NULL ," + // 7: address
                "\"PHONE\" TEXT NOT NULL ," + // 8: phone
                "\"LAND_TYPE\" TEXT NOT NULL ," + // 9: landType
                "\"RIGHT_SETTING_TYPE\" TEXT NOT NULL ," + // 10: rightSettingType
                "\"BUILD_YEAR\" TEXT NOT NULL ," + // 11: buildYear
                "\"IS_REBUILD\" INTEGER NOT NULL ," + // 12: isRebuild
                "\"REMARK\" TEXT NOT NULL ," + // 13: remark
                "\"USER_ID\" TEXT NOT NULL ," + // 14: userId
                "\"REGION\" INTEGER NOT NULL ," + // 15: region
                "\"OBLIGEE_ID\" INTEGER NOT NULL ," + // 16: obligeeId
                "\"OBLIGEE\" TEXT NOT NULL );"); // 17: obligee
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_NAIRE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionNaire entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObligeeType());
        stmt.bindString(3, entity.getObligeeIdentityType());
        stmt.bindString(4, entity.getObligeeIdentity());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getIdentityAddress());
        stmt.bindString(7, entity.getCertificateUnit());
        stmt.bindString(8, entity.getAddress());
        stmt.bindString(9, entity.getPhone());
        stmt.bindString(10, entity.getLandType());
        stmt.bindString(11, entity.getRightSettingType());
        stmt.bindString(12, entity.getBuildYear());
        stmt.bindLong(13, entity.getIsRebuild() ? 1L: 0L);
        stmt.bindString(14, entity.getRemark());
        stmt.bindString(15, entity.getUserId());
        stmt.bindLong(16, entity.getRegion());
        stmt.bindLong(17, entity.getObligeeId());
        stmt.bindString(18, entity.getObligee());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionNaire entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObligeeType());
        stmt.bindString(3, entity.getObligeeIdentityType());
        stmt.bindString(4, entity.getObligeeIdentity());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getIdentityAddress());
        stmt.bindString(7, entity.getCertificateUnit());
        stmt.bindString(8, entity.getAddress());
        stmt.bindString(9, entity.getPhone());
        stmt.bindString(10, entity.getLandType());
        stmt.bindString(11, entity.getRightSettingType());
        stmt.bindString(12, entity.getBuildYear());
        stmt.bindLong(13, entity.getIsRebuild() ? 1L: 0L);
        stmt.bindString(14, entity.getRemark());
        stmt.bindString(15, entity.getUserId());
        stmt.bindLong(16, entity.getRegion());
        stmt.bindLong(17, entity.getObligeeId());
        stmt.bindString(18, entity.getObligee());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionNaire readEntity(Cursor cursor, int offset) {
        QuestionNaire entity = new QuestionNaire( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // obligeeType
            cursor.getString(offset + 2), // obligeeIdentityType
            cursor.getString(offset + 3), // obligeeIdentity
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // identityAddress
            cursor.getString(offset + 6), // certificateUnit
            cursor.getString(offset + 7), // address
            cursor.getString(offset + 8), // phone
            cursor.getString(offset + 9), // landType
            cursor.getString(offset + 10), // rightSettingType
            cursor.getString(offset + 11), // buildYear
            cursor.getShort(offset + 12) != 0, // isRebuild
            cursor.getString(offset + 13), // remark
            cursor.getString(offset + 14), // userId
            cursor.getLong(offset + 15), // region
            cursor.getLong(offset + 16), // obligeeId
            cursor.getString(offset + 17) // obligee
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionNaire entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObligeeType(cursor.getString(offset + 1));
        entity.setObligeeIdentityType(cursor.getString(offset + 2));
        entity.setObligeeIdentity(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setIdentityAddress(cursor.getString(offset + 5));
        entity.setCertificateUnit(cursor.getString(offset + 6));
        entity.setAddress(cursor.getString(offset + 7));
        entity.setPhone(cursor.getString(offset + 8));
        entity.setLandType(cursor.getString(offset + 9));
        entity.setRightSettingType(cursor.getString(offset + 10));
        entity.setBuildYear(cursor.getString(offset + 11));
        entity.setIsRebuild(cursor.getShort(offset + 12) != 0);
        entity.setRemark(cursor.getString(offset + 13));
        entity.setUserId(cursor.getString(offset + 14));
        entity.setRegion(cursor.getLong(offset + 15));
        entity.setObligeeId(cursor.getLong(offset + 16));
        entity.setObligee(cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionNaire entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionNaire entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionNaire entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
